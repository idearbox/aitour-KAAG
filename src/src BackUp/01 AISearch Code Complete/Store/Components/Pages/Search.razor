@page "/search"

@inject Store.Services.ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Search Products</PageTitle>

<h1>Search Products</h1>

<p>Search our amazing outdoor products that you can purchase.</p>

<div class="form-group">
    <label for="search">Type your question:</label>
    <div class="input-group">
        <input css type="text" id="search" class="form-control" @bind="searchTerm" />
    </div>
    <button id="btnSearchDB" class="btn btn-primary" @onclick="DoSearchDB" type="submit">1..Search DB</button>
    <button id="btnSearchAI" class="btn btn-primary" @onclick="DoSearchAI" type="submit">2..Search AI</button>

    <hr />
    <p class="quote">@aiResponse</p>

    @* Uncomment this to show elapsed time *@
    @* <p class="smallquote">Elapsed Time: [@elapsedTime]</p> *@
</div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <!-- Simulating images being hosted on a CDN -->
                    @* <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td> *@
                    <td><img height="160" width="160" src="https://localhost:7130/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string searchTerm = "";
    private List<DataEntities.Product>? products;
    private string aiResponse = "";
    private string elapsedTime = "";

    private async Task DoSearchDB(MouseEventArgs e)
    {
        await Task.Delay(500);
        var response = await ProductService.Search(searchTerm, false);
        aiResponse = response.Response;
        products = response.Products;
        elapsedTime = response.ElapsedTime.ToString();
    }

    private async Task DoSearchAI(MouseEventArgs e)
    {
        await Task.Delay(500);
        var response = await ProductService.Search(searchTerm, true);
        aiResponse = response.Response;
        products = response.Products;
        elapsedTime = response.ElapsedTime.ToString();
    }
}
